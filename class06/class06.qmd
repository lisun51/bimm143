---
title: "Class 06: R Functions"
author: "Lixin Sun"
date: 2023-04-21
format: gfm
---

In this class, we will develop our own **R functions** to calculate average grades in a fictional class.

# Simplified Version

We will start with a simplified version of the problem, just calculating the average grade of one student.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

First, calculate the average score of the assignments using `mean()`.

```{r}
mean(student1)
```

Then, find the minimum score using `which.min()`.

```{r}
student1
which.min(student1)
```

Average the first 7 assignments.

```{r}
mean(student1[1:7])
```

Another way to select the first 7 assignments.

```{r}
student1[1:7]
student1[-8]
```

We can combine the codes into one line to find the average after dropping the lowest score.

```{r}
mean(student1[-which.min(student1)])
```

**Save** the variable of the vector with the lowest score dropped.

```{r}
student1_drop_lowest=student1[-which.min(student1)]
student1_drop_lowest

mean(student1_drop_lowest)
```

Try applying the code for student2.

```{r}
student2
student2_drop_lowest = student2[-which.min(student2)]
student2_drop_lowest
```

The above code is not working because NA is recognized as a character instead of number. There is a way to calculate the mean after removing the missing values.

```{r}
mean(student2, na.rm = TRUE)
```

However, this code doesn't work for students with multiple missing scores, like student3.

```{r}
student3
mean(student3, na.rm = TRUE)
```

Now, find the position of missing scores without removing them for student2.

```{r}
student2
is.na(student2)
which(is.na(student2))
```

Apply the code for student3 and we can see there are multiple missing values.

```{r}
student3
which(is.na(student3))
```

Then, mask the missing values with zeros. Apply the code for student3 and find the new mean after dropping the lowest score.

```{r}
student2[is.na(student2)] <- 0
student2
student3[is.na(student3)] <- 0
student3
mean(student3)
mean(student3[-which.min(student3)])
student3_drop_lowest = student3[-which.min(student3)]
mean(student3_drop_lowest)
```

Now, build a function that combines all of the codes above.

```{r}
# Here's the working code.
x <- c(100,75,50,NA)
x[is.na(x)] <- 0
x_drop_lowest <- x[-which.min(x)]
mean(x_drop_lowest)
```

# Q1. Function `grade()`

```{r}
#' Calculate the average score for a vector of homework scores,
#' considering NA values as zeros and dropping the lowest score.
#'
#' @param x A numberic vector of homework scores
#'
#' @return Teh average value of homework scores
#' @export
#'
#' @examples
#' 
#' student <- c('100', '50', NA)
#' grade(student)
#' 
grade <- function(x) {
    # Mask NA values with zeros
    x[is.na(x)] <- 0
    # Drop the lowest score
    x_drop_lowest <- x[-which.min(x)]
    # Calculate the average score
    mean(x_drop_lowest)
}
```

Let's test the function.

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

grade(student1)
grade(student2)
grade(student3)
```

Now, apply the function to a gradebook from this URL https://tinyurl.com/gradeinput

```{r}
URL <- "https://tinyurl.com/gradeinput"

#row.names
gradebook <- read.csv(URL, row.names = 1)
head(gradebook)
```

If we directly run the code below, an error message saying "Error in which.min(x) : 'list' object cannot be coerced to type 'double'" will appear. This is because the input of the function we created should be a vector, while `gradebook` is a dataframe.

```{r}
#grade(gradebook)
```

To solve this issue, we need to use the function `apply(array, MARGIN, function)` and running it by **rows** with `MARGIN = 1`.

```{r}
apply(gradebook, 1, grade)
```

#### **Q2.** Using your grade() function and the supplied gradebook, who is the top scoring student overall in the gradebook? \[**3pts**\]

#### **Answer**: The top scoring student overall is student 18 and the maximum score is 94.5.

```{r}
which.max(apply(gradebook, 1, grade))
max(apply(gradebook, 1, grade))
```

#### **Q3.** From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? \[**2pts**\]

#### **Answer: The toughest homework will be hw2 considering the mean and considering missing homework as 0. If we consider the mean without missing homework, the toughest homework will be hw3. If we consider the median without missing homework, then the toughest homework will be hw2.**

```{r}
# Replace NA values with zeros.
gradebook[is.na(gradebook)]<- 0
# Apply the function to find averages of each homework.
apply(gradebook, 2, mean)
```

```{r}
# Apply the mean function with an arguement that removes NA values.
gradebook <- read.csv(URL, row.names = 1)
apply(gradebook, 2, mean, na.rm = TRUE)
```

If we use the median instead of the mean as a measure of overall score...

```{r}
apply(gradebook, 2, median, na.rm = TRUE)
```

If we use some plots...

```{r}
boxplot(gradebook)
```

#### **Q4.** From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? \[**1pt**\]

#### Answer: Hw5 was the most predictive of overall score with the highest correlation of 0.6325982.

```{r}
overall_grades = apply(gradebook, 1, grade)
overall_grades
```

```{r}
gradebook$hw1
cor(overall_grades, gradebook$hw1)
```

```{r}
gradebook[is.na(gradebook)]<- 0
apply(gradebook, 2, cor, y = overall_grades)

which.max(apply(gradebook, 2, cor, y = overall_grades))
```
